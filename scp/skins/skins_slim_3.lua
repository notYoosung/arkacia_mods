local n_skins = 22 local texture_list_default = {}
local texture_list_slim = {
    ["v_muder_drones_raines"] = "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",
    ["basically_me_abandoned23232"] = "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",
    ["wedding_dress"] = "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",
    ["egg_girl"] = "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",
    ["hu_tao_wqtermelcn_4febbfc99fc9fdf4"] = "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",
    ["reindeer_girl_6456005"] = "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",
    ["strawberry_kitty_13486c32a706077"] = "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",
    ["kujou_alisa_alya_mikhailovna_28t235251_702_17574218"] = "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",
    ["uzi_murder_drones_3def1f9e02aa86cb"] = "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",
    ["n_murder_drones"] = "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",
}
local function is_base64(str)
    return str:find("/") ~= nil and true or false
end
function mcl_meshhand.update_player(player)
	local hand
	if mcl_skins_enabled then
		local node_id = mcl_skins.get_node_id_by_player(player)
		hand = ItemStack("mcl_meshhand:" .. minetest.registered_nodes[node_id].texture[0])
	else
		local creative = minetest.is_creative_enabled(player:get_player_name())
		hand = ItemStack("mcl_meshhand:hand" .. (creative and "_crea" or "_surv"))
	end
	player:get_inventory():set_stack("hand", 1, mcl_potions.hf_update_internal(hand, player))
end
function mcl_skins.get_node_id_by_player(player)
	local skin = mcl_skins.player_skins[player]
	local simple_skin = skin.simple_skins_id
	if simple_skin then skin = mcl_skins.texture_to_simple_skin[skin.simple_skins_id] end
	local creative = minetest.is_creative_enabled(player:get_player_name())
	local append = (skin.slim_arms and "_female" or "_male") .. (creative and "_crea" or "_surv")
	if simple_skin then
		return skin.texture:gsub(".png$", ""):gsub("[^a-zA-z0-9_]", "") .. append
	else
		return skin.base:gsub(".png$", "") .. minetest.colorspec_to_colorstring(skin.base_color):gsub("#", "") .. append
	end
end


for i, v in pairs(texture_list_default) do
	mcl_skins.register_simple_skin({
        index = n_skins,
		texture = "blank.png^[png:" .. v,
	})
    n_skins = n_skins + 1
end
for i, v in pairs(texture_list_slim) do
    mcl_skins.register_simple_skin({
        index = n_skins,
        texture = "blank.png^[png:" .. v,
        slim_arms = true
    })
    n_skins = n_skins + 1
end

local function make_texture(base, colorspec)
    local output = ""
    if mcl_skins.masks[base] then
        output = mcl_skins.masks[base] ..
            "^[colorize:" .. minetest.colorspec_to_colorstring(colorspec) .. ":alpha"
    end
    if #output > 0 then output = output .. "^" end
    output = output .. base
    return output
end
function mcl_skins.get_skin_list()
    local list = {}
    for _, game_mode in pairs({ "_crea", "_surv" }) do
        for _, base in pairs(mcl_skins.base) do
            for _, base_color in pairs(mcl_skins.base_color) do
                local id = base:gsub(".png$", "") .. minetest.colorspec_to_colorstring(base_color):gsub("#", "")
                local female = {
                    texture = make_texture(base, base_color),
                    slim_arms = true,
                    id = id .. "_female" .. game_mode,
                    creative = game_mode == "_crea"
                }
                table.insert(list, female)

                local male = {
                    texture = make_texture(base, base_color),
                    slim_arms = false,
                    id = id .. "_male" .. game_mode,
                    creative = game_mode == "_crea"
                }
                table.insert(list, male)
            end
        end
        for _, skin in pairs(mcl_skins.simple_skins) do
            table.insert(list, {
                texture = skin.texture,
                slim_arms = skin.slim_arms,
                id = skin.texture:gsub("%.png", ""):gsub("[^a-zA-Z0-9_]", "") .. (skin.slim_arms and "_female" or "_male") .. game_mode,
                creative = game_mode == "_crea"
            })
        end
    end
    return list
end


local node_def = {
    description = "",
    use_texture_alpha = minetest.features.use_texture_alpha_string_modes and "clip" or false,
    visual_scale = 1,
    wield_scale = { x = 1, y = 1, z = 1 },
    paramtype = "light",
    drawtype = "mesh",
    node_placement_prediction = "",
    drop = "",
    on_drop = function(_, _, _) return ItemStack() end,
    groups = {
        dig_immediate = 3,
        not_in_creative_inventory = 1,
        dig_speed_class = 1,
    },
    tool_capabilities = {
        full_punch_interval = 0.25,
        max_drop_level = 0,
        groupcaps = {},
        damage_groups = { fleshy = 1 },
    },
    _mcl_diggroups = {
        handy = { speed = 1, level = 1, uses = 0 },
        axey = { speed = 1, level = 1, uses = 0 },
        shovely = { speed = 1, level = 1, uses = 0 },
        hoey = { speed = 1, level = 1, uses = 0 },
        pickaxey = { speed = 1, level = 0, uses = 0 },
        swordy = { speed = 1, level = 0, uses = 0 },
        swordy_cobweb = { speed = 1, level = 0, uses = 0 },
        shearsy = { speed = 1, level = 0, uses = 0 },
        shearsy_wool = { speed = 1, level = 0, uses = 0 },
        shearsy_cobweb = { speed = 1, level = 0, uses = 0 },
    },
    range = tonumber(minetest.settings:get("mcl_hand_range")) or 4.5
}
local creative_hand_range = tonumber(minetest.settings:get("mcl_hand_range_creative")) or 10
local list = mcl_skins.get_skin_list()
for _, skin in pairs(list) do
    if skin.slim_arms then
        local female = table.copy(node_def)
        female._mcl_hand_id = skin.id
        female.mesh = "mcl_meshhand_female.b3d"
        female.tiles = { skin.texture }
        minetest.register_node(":mcl_meshhand:" .. skin.id, female)
    else
        local male = table.copy(node_def)
        male._mcl_hand_id = skin.id
        male.mesh = "mcl_meshhand.b3d"
        male.tiles = { skin.texture }
        minetest.register_node(":mcl_meshhand:" .. skin.id, male)
    end

    local node_def = table.copy(node_def)
    node_def._mcl_hand_id = skin.id
    node_def.tiles = { skin.texture }
    node_def.mesh = skin.slim_arms and "mcl_meshhand_female.b3d" or "mcl_meshhand.b3d"
    if skin.creative then
        node_def.range = creative_hand_range
        node_def.groups.dig_speed_class = 7
        node_def.tool_capabilities.groupcaps.creative_breakable = { times = { 0 }, uses = 0 }
    end
    minetest.register_node(":mcl_meshhand:" .. skin.id, node_def)
end
