local n_skins = 12 local texture_list_default = {}
local texture_list_slim = {
    ["v_muder_drones_raines"] = "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",
    ["christmas_aesthetic_girl"] = "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",
    ["flower_crown_pant_tears_c88a8be708bcaa05"] = "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",
    ["wedding_dress"] = "iVBORw0KGgoAAAANSUhEUgAAAEAAAAAgCAYAAACinX6EAAAAAXNSR0IArs4c6QAAAERlWElmTU0AKgAAAAgAAYdpAAQAAAABAAAAGgAAAAAAA6ABAAMAAAABAAEAAKACAAQAAAABAAAAQKADAAQAAAABAAAAIAAAAADfYzX9AAAHzUlEQVRoBcVYa2xUVRCeu1T7oN3d2hVbSKwGTQBD9QeSFMHE8DD0hSYobQEThIiFxoCYICGiAR/wo0IQqMQYEoHSwg+1LSWKRQOVGtIfUIzlh5iAEQm2FrrQWhv2er65O7end+8+Souczd2ZO49zzsyZOXPuMShOmzH5SdMwjAgp0zSZZpq3I3g6ofXCz5HKukACeP7kPB6staOd+3K+o4v8SVOtCYX7a71wPqFxPQmMT1kZY1kMUPCAN51pHk8SBbxexgF1HLyRNhgb4PF1+0wCTRxRPD1fMRVNzcmal0kWLf7oCTnAn2k5AFDHpXufP41RQB0X/kih359OrR2DKwocNDSsvM9vzQ9Qx51R4TaPhBzgTU2lB9ItIwUHlOYHPyOD/GlphHRhXOOL3J1AhP3+b49HhDNouYVTuEuMn5meToBoOs6EGH9xY7T+VDP19fxJq0pX2t3srt1Lad4c6lX0sqKlTK/dWkGetAzGQ71B2rDziC0/EqSzs9MMBAIRDhC6rHJT208GtQ2OVDmhWM+ZQcZwse5z1SYG+/238wwvh6HQn5nylNlzbK8ZbP7CvNX6JT/AQQNvuOO5yWN80N1g/iRrg3TTE+e48YQWNwJuT3iJIyBVrfiYP45QmnrHyguUju4WlJV2QoznFhn6PBKpBHEdsODZOdxnbeN+Sg0bL2GvD3a3cDGycmslR8D66vWE0ny641xEWtzJHAx0BkVT/Qz1qzt6gLDayPvScH47O8YZwHk2ONx4gJK92dTfc5UWFpZzX7qeU57HVP3AkPzJVg2XnV5WW9fHPKUEdwVvsZ7wl29Zbn7+zueG6Fn9Gapy6OcG064kUj7B5yogHevGry57Xfq3a79+DhAdCAGH8UgRQKExov7kzOCmj8kGMtIpt/AJFhcjSt8qtfeP4ukzGNfLsNCgpBsP/Snl0+1zwuA5grsP/8k5YqqZpBsteY5Qx2DwNFYbtb2z56Zd4wUHHw2y/6iISVF6iICGUyf4/eXCJTYfspBDf4KjH7R9TQ2cz2K8QIlOmQtkfeFSB5rwEUVIFdEDXHuqjDplfurM0HCm1U4ZRNrSeXPNzuBNStKNRtjDeEC9zn+yZiF57h+s+1gO898+KlxXjTmxbIUqk3DUjppajgQ447BKpxSVTnAO+Gg+dVaoU/uJ0AGdk5e8ZwXoKKOzMqxzCGiIJHGEyACu/mg17xPx+oPs9ppDPK4HxspOv3HVOnrvtRWkhz9y1z9/JXlnv0JjVJ3H41M4aPI9gA4lx2Es+uOICFcOGFmtzg4fH6iht6veZ+ORLk7jkcti/NLn59opgP71FWw4c9peTfBEtq6qLiISxBmQQ2QIFLqBWj3x4XF08fI1AkQTHPDHX85SU1MTtVzspo3TrFX4oK2XZk7MpIKCAlL6rCc6uv6He6qGrDSM1p0DJ717cAePiTxmRP2hfj+Wm037vzkuJJtX+UKJueurenlng5QD6NdLV0kve0vmzTEHpmbR7g27CZVjW8W2iEjbXLOZ2AEIKeQlIJrggHBAV1cXfVZ/klZlX2P+nqvjaHlBPj34UDY7IJY+FMDfc+hT2xmLVHURnZAZ4g0L+ZoVPm7L+H/f7OPxopU82QNwTO9S+ZylNlM06GPjxR6DyMRYjy6ZRpvKN7EzOmra7PHZAawV4+9YVQUZag/Qj7rYA+aH94AYqpwmkh5ucsrBvJp8ogMWDvzWC1YJgw4MdTrBSZMToYzllAdfeOhT+BJKoHGTPJH3K1euCMowLy8vQkcXwMT0gXQe8K9PfuckDXmXPWAIUXvBcVteU54uohs9Qerv76ecnBwhx5yfCAlM6GtQhBOBMF6+HBF6eNCElkgf/6dM3KOwPpnx48frr3HxQ9vXscy8FZvjyt4rgYQjYDjGYxPSS6Qcfu6VkbHG5dNTLIF4vJJZs20RGKrnP+4S0OSDCngoFALgZlKIPMYYte8N0oQHiP6a923RSQnjY/NfFNmYe0LCESC9OWFIuxQV41GCBBd52QvkXSCMDKjbJDINBdWdHpcyi+bsQ3RGE47YATIZWW2845wumx6MAA4aGt4bWk4wLn/C82eqay31kOmx5JVTRrMtnjvbxKP3OWoOQKdwAh79OwIrjAYaSqDuKGaoP19KiqD2GV+n2UwH0vf4LNIfB9t+rSwpso3ODH9MVZYUMm1UHCBGLSsoITzR2quFC2y+MwoCXitCoKvj0fqC4QMDA0Me0IbbRsUB+qCSt/ua6m2y4BINNuOeIlZ6jYoDgsEg4dHbsoJipoEOfLCZNn2QNjxMVt+phYgYbhTEPQjhKJzoGWBn3UGeU9Wba5xz43fhuzHt6FB7ho0rQTeDPJ7o6waem07kmNa2ENMBMD73r7N0SWnHckIGyphqVv6blDvB+qwWOjPV3xuLFjMqKSF0wK5gr1UBwvgjIKqW6fdZiPaP83+s5qYTTT66K6NpJEC/cauXr7lEFFdeoEVr1/usz17wBRcYTWc49F31jXY97Q6Ptav+KNOiOkBWHwMhCpxfhTKBxpYfBA1Dg6+bHMQwDWFnVySCLm6jr3eru0UjxFDHwRvNdvB4s4FH79Nob293HcUt5N2c4Ca3trwswglrykv5vlAfXPCimc8JOgQ2tnwfNQXwCezWkpOTyedVV3dJ9wmbDZb7AiHKfcN/Ze7qwUXVdbwAAAAASUVORK5CYII=",
    ["hu_tao_wqtermelcn_4febbfc99fc9fdf4"] = "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",
    ["strawberry_kitty_13486c32a706077"] = "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",
    ["uzi_murder_drones_3def1f9e02aa86cb"] = "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",
    ["christmas_valkyra_f"] = "iVBORw0KGgoAAAANSUhEUgAAAEAAAAAgCAYAAACinX6EAAAAAXNSR0IArs4c6QAAAERlWElmTU0AKgAAAAgAAYdpAAQAAAABAAAAGgAAAAAAA6ABAAMAAAABAAEAAKACAAQAAAABAAAAQKADAAQAAAABAAAAIAAAAADfYzX9AAAIX0lEQVRoBa1ZCWyUVRCebTZUDrG4tKWFykIFwbTIoSBEIQUCJCpqNBLEiDFRpBxabyAhCsYDRSIoUGKUikiAGEzUBAhIUENVLiMI2lBYKbZQqYJylVR/3zf/fj9vj263u53k77x/zjfz5s17/9YnLcDbhUEnkYgv55zk53eT2tqTiiHLMXBZ5WlfIv3W8DiXUF2tLL1wuU3s+pOdAJwG8/JV3B4j+JUnehl6L5mXe9YzF8i9Njw+7dHaatBWwWM+GalMiomArhu8ayUveJ3gQfANp/7USkjFfks6rISW5JLht5gArDaAQfMdNHuM97rQcX2YBFRHW8LT1aGYsu9XcIuDJ1U/SW0Bu+TjJYLOB9w3nUOTiBXeuC0GXPV4SUjHfosV8NSxU1LXeFlXG4ngAxp4NgT6FgkfJANNMF04euovXV0EDt+zO7TzVpu8dHy0WAFV1Ufljdq/pFdOVoSfY/VnBDxAfnZQav8ISUZOUN/xJ2Aedwuk1wR753bxIVDb/zsiDvyD5zlMcdBiAg4/M15k8RYTrEjfwt7qhoGDN9HU0OwVr0YEz7m0RQXAFgPdvGuvrv6EEUPSDpxz9HFvgYASQ2ljxRGkBm/oic556PU3CUJyXsjvInmZ7byGCR4Bttk/SAOOt6ex4gzalk00bkkHW4f+bZ8ZmBiAwW9ocreY/+Myzx+ONSQB2B5TgLLQZb+gTdoHnUAasb0IjgEEv2R4VwcPdbaVjnTw/LzoIcXr7ytSHuWgA13K2zZBs/3bfSQDjMpQSPWw8thbu0tv1/McQePBsQYg5tjmQwe6sAGATTploMSgcwxZe0VgA4HCNm+ReIdvPDhqgbEQAMhAFjLQJdg2Qdv4r2gTxZjzwlh7AFYOyij7gm+XgB4B2UPukBLzALKHWKzvf7ReRC5WzJKa28r0dEDTesDvU2ew/2THTB0/tWu/VJqt8s75RuXTAEoY/o++fLdeohAgVxkyCHzs8q99pCEJHEMWFy8xuugT2I72FkJl0P/oDzbI06OGarX4DPixYlsq98nZxVPdrBrD0ZA//S0lNW5frThzzCOK1xYriviD7bDbTKbqmQqvGmAfWWd10CfwxtwuOmlUEAMBRrD2FphyIFP9TPr0oM/fd4izeexxzy9kUQFIQiDsH4lgs0SgEEaSgT/b+YNDmh+Oi4YNlCu3eIhcATieWjpLNn+10yPm9hsgE0aPkinLl8na4kaPbg9QSbsXuxUC+/ffU6RHKSqNPsHXiYeTj0BsGxg/19BTmir3RtCbqvb6xlaZ8jWJeDPwm6rYurTpJSVcIagKJKFx6aOuX5MwP46qgCkvAkoNAOweYz3l7tEjpb7JLw1VB5U3eOQYQxshFSYBtj51I/XNnSBsc/uMUapv87GiJJYMu8trYju+/1zpCPBKO6akixk83rAdYAtB28mgBuioKFYaZbTM0ET4UYNLDQAXm4kZlTqevWFHzDn/X31Ilj5QonzoIxHAAI7dBCY+Rtnoou/zv9Ts9hKDiVNOHZg/8WjktQZ7Tqj0/PIZTuH110v1kSMC3P6PPGWFQiHF8+e9GKNDXWBMbNy9E2Trps2yJzBZWTc3rBPS9o69XeZc3VFe++e85JvP61pzDANPPXdWKjpdI4tK30tov3BMN+fvhnNq95VFC715ThtXllBPFeL8Mfe4SLCDRxJaC+XmtwEEXzzoRpmYuUMf2DgYPjEQbHTwSAKCB24NYH7P3nCbJqE1erZsTAK48sS2cLLjTZdGyIfHb5KS0nm6HZAMAle8OUy5ZDAWCx9fwKlCTALSrQB7Ipgc+seB/Yf0pAHPLns7CdgWqVTA+4e3pVUB/vKtSxyuNnA0XMyuc/fZLW5fiJbPW7NeUPbx4OHpq+SjFY9HsCDvdhVzswxzpoZ7hmN6xpQ7Zzl2z3i3Q/Pfax+uqvBsZw/s5J0gnQOdpHr7yeie4BjbKr/2i2Uezzf6wemeomfNDE6eOC5nGuptkjfOCuRItx7uhWlu1s8yedc+j4dBoKG/5HRleCLzh5/xbnfgoyJevXhJ1o0YjFePN/+ce5Vd0CkrhqaC1p9Tv8efW273HJXa9dFPXpDhIxL0aJovZgtYPpIaIhhk3H4QfP3pOmkqDukz7dcq3QKQxYNVhTzfcVGCDMGWJy1VjFPJvmvQDmjgpZ0Au8HReEH3nhEVUH5DXz0FIGvL8x0nBGQItjxpqWLcH/jNYNsADby0E4Dyx7lsP7YjjLHSWGXI2vJ8Bw8yBFuetHRweLVhAttdb4SsCk0A9jseQqL9Dxn0BspzH1MX+LuLGwVVQEDJY5Uha8vzHTy72a3MusqTp410MFfb2EAP8NlV4V/9+py4tqtP1MWlk1jYw21yn05yGxnpNmajmnmhSYrGD9QLks3nquOWONNcnjaGmU+cuSRFJWH5PvlCO2xweOdt0LbHMeXwHu4BZHmYPSDiVxSPawY1NTXSXBIQfEFBgYrnDLraVtMxGlz3P4dqAwSBXX1mdUj50X/eLQzqp3D0KQD5PgN6R4vrO5MSzWTwSZ4Cqf1nyHY6t/1VEScAgsckcAIQ2NUha8vzvblTAPx0waoAlL/2AGD2heZvGUl6tvducyro6uUvbZAvh/P/ha4kdP3t/HLM8MofuVVYARHycc77ROUPHhaBAB/mN0D8MxUkJsGH3wXVPwVTxZgsunkimCb1MvOmzt5RR3k2xANmz0fcAyz51YFAs9fn5q7VoC/a/p5OCfM7cOGQFHbw2xc+p5fpS+D513yyPmbuex57WGld5y2I4YHwjXmCwSCGcrCoWMYnMclx1icw5VfzUxg/doa/BhmULc+PndZizC/8w4djPvO9T298c5Qt3OSTyq+d/wESchMHl5OOCQAAAABJRU5ErkJggg==",
    ["n_murder_drones"] = "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",
    ["christmas_snow_girl"] = "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",
}
function mcl_meshhand.update_player(player)
	local hand
	if mcl_skins_enabled then
		local node_id = mcl_skins.get_node_id_by_player(player)
		hand = ItemStack("mcl_meshhand:" .. minetest.registered_nodes[node_id].texture[0])
	else
		local creative = minetest.is_creative_enabled(player:get_player_name())
		hand = ItemStack("mcl_meshhand:hand" .. (creative and "_crea" or "_surv"))
	end
	player:get_inventory():set_stack("hand", 1, mcl_potions.hf_update_internal(hand, player))
end
function mcl_skins.get_node_id_by_player(player)
	local skin = mcl_skins.player_skins[player]
	local simple_skin = skin.simple_skins_id
	if simple_skin then skin = mcl_skins.texture_to_simple_skin[skin.simple_skins_id] end
	local creative = minetest.is_creative_enabled(player:get_player_name())
	local append = (skin.slim_arms and "_female" or "_male") .. (creative and "_crea" or "_surv")
	if simple_skin then
		return skin.texture:gsub(".png$", ""):gsub("[^a-zA-z0-9_]", "") .. append
	else
		return skin.base:gsub(".png$", "") .. minetest.colorspec_to_colorstring(skin.base_color):gsub("#", "") .. append
	end
end


for i, v in pairs(texture_list_default) do
	mcl_skins.register_simple_skin({
        index = n_skins,
		texture = "blank.png^[png:" .. v,
	})
    n_skins = n_skins + 1
end
for i, v in pairs(texture_list_slim) do
    mcl_skins.register_simple_skin({
        index = n_skins,
        texture = "blank.png^[png:" .. v,
        slim_arms = true
    })
    n_skins = n_skins + 1
end

local function make_texture(base, colorspec)
    local output = ""
    if mcl_skins.masks[base] then
        output = mcl_skins.masks[base] ..
            "^[colorize:" .. minetest.colorspec_to_colorstring(colorspec) .. ":alpha"
    end
    if #output > 0 then output = output .. "^" end
    output = output .. base
    return output
end
function mcl_skins.get_skin_list()
    local list = {}
    for _, game_mode in pairs({ "_crea", "_surv" }) do
        for _, base in pairs(mcl_skins.base) do
            for _, base_color in pairs(mcl_skins.base_color) do
                local id = base:gsub(".png$", "") .. minetest.colorspec_to_colorstring(base_color):gsub("#", "")
                local female = {
                    texture = make_texture(base, base_color),
                    slim_arms = true,
                    id = id .. "_female" .. game_mode,
                    creative = game_mode == "_crea"
                }
                table.insert(list, female)

                local male = {
                    texture = make_texture(base, base_color),
                    slim_arms = false,
                    id = id .. "_male" .. game_mode,
                    creative = game_mode == "_crea"
                }
                table.insert(list, male)
            end
        end
        for _, skin in pairs(mcl_skins.simple_skins) do
            table.insert(list, {
                texture = skin.texture,
                slim_arms = skin.slim_arms,
                id = skin.texture:gsub("%.png", ""):gsub("[^a-zA-Z0-9_]", "") .. (skin.slim_arms and "_female" or "_male") .. game_mode,
                creative = game_mode == "_crea"
            })
        end
    end
    return list
end


local node_def = {
    description = "",
    use_texture_alpha = minetest.features.use_texture_alpha_string_modes and "clip" or false,
    visual_scale = 1,
    wield_scale = { x = 1, y = 1, z = 1 },
    paramtype = "light",
    drawtype = "mesh",
    node_placement_prediction = "",
    drop = "",
    on_drop = function(_, _, _) return ItemStack() end,
    groups = {
        dig_immediate = 3,
        not_in_creative_inventory = 1,
        dig_speed_class = 1,
    },
    tool_capabilities = {
        full_punch_interval = 0.25,
        max_drop_level = 0,
        groupcaps = {},
        damage_groups = { fleshy = 1 },
    },
    _mcl_diggroups = {
        handy = { speed = 1, level = 1, uses = 0 },
        axey = { speed = 1, level = 1, uses = 0 },
        shovely = { speed = 1, level = 1, uses = 0 },
        hoey = { speed = 1, level = 1, uses = 0 },
        pickaxey = { speed = 1, level = 0, uses = 0 },
        swordy = { speed = 1, level = 0, uses = 0 },
        swordy_cobweb = { speed = 1, level = 0, uses = 0 },
        shearsy = { speed = 1, level = 0, uses = 0 },
        shearsy_wool = { speed = 1, level = 0, uses = 0 },
        shearsy_cobweb = { speed = 1, level = 0, uses = 0 },
    },
    range = tonumber(minetest.settings:get("mcl_hand_range")) or 4.5
}
local creative_hand_range = tonumber(minetest.settings:get("mcl_hand_range_creative")) or 10
local list = mcl_skins.get_skin_list()
for _, skin in pairs(list) do
    if skin.slim_arms then
        local female = table.copy(node_def)
        female._mcl_hand_id = skin.id
        female.mesh = "mcl_meshhand_female.b3d"
        female.tiles = { skin.texture }
        minetest.register_node(":mcl_meshhand:" .. skin.id, female)
    else
        local male = table.copy(node_def)
        male._mcl_hand_id = skin.id
        male.mesh = "mcl_meshhand.b3d"
        male.tiles = { skin.texture }
        minetest.register_node(":mcl_meshhand:" .. skin.id, male)
    end

    local node_def = table.copy(node_def)
    node_def._mcl_hand_id = skin.id
    node_def.tiles = { skin.texture }
    node_def.mesh = skin.slim_arms and "mcl_meshhand_female.b3d" or "mcl_meshhand.b3d"
    if skin.creative then
        node_def.range = creative_hand_range
        node_def.groups.dig_speed_class = 7
        node_def.tool_capabilities.groupcaps.creative_breakable = { times = { 0 }, uses = 0 }
    end
    minetest.register_node(":mcl_meshhand:" .. skin.id, node_def)
end
